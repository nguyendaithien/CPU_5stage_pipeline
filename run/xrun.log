xrun: 23.09-s001: (c) Copyright 1995-2023 Cadence Design Systems, Inc.
TOOL:	xrun	23.09-s001: Started on Oct 07, 2024 at 23:28:17 +07
xrun
	-sv
	-f list_file.f
		/home/usr3/project/CPU_5stage_pipeline/tb/testbench.sv
		/home/usr3/project/CPU_5stage_pipeline/tb/pkg_1.sv
		/home/usr3/project/CPU_5stage_pipeline/tb/DMEM.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/decoder.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/CPU_EDABK_TOP.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/register_file.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/ALU.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/IF_stage.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/ID_stage.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/EX_stage.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/MEM_stage.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/WB_stage.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/control_hazard.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/defi.vh
		/home/usr3/project/CPU_5stage_pipeline/rtl/pkg.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/csr_register.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/controller.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/SLEEP_UNIT.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/COMPRESSED_DECODER.sv
		/home/usr3/project/CPU_5stage_pipeline/rtl/csr.sv
		/home/usr3/project/CPU_5stage_pipeline/tb/test_case.sv
		/home/usr3/project/CPU_5stage_pipeline/tb/check_FSM.sv
		/home/usr3/project/CPU_5stage_pipeline/tb/check_hazard.sv
	-access +rwc
	-gui
	-s
xmsim: *W,NOMTDGUI: Multi-Threaded Dumping is disabled for interactive debug mode.
xcelium> 
xcelium> source /home/edabk/Cadence/XCELIUM2309/tools/xcelium/files/xmsimrc
xcelium> 
-------------------------------------
Relinquished control to SimVision...
# Restoring simulation environment...
xcelium> input -quiet .reinvoke.sim
xcelium> file delete .reinvoke.sim
xcelium> run
xmsim: *W,DFUSE: $dumpfile cpu.VCD is already in use (VCD file).
            File: ../tb/testbench.sv, line = 226, pos = 10
           Scope: testbench
            Time: 0 FS + 0

xmsim: *W,VCDFUSE: Default VCD file name verilog.dump already in use (VCD file).
            Time: 0 FS + 4

 NOT ISSSSSS ADDDD INSTRUCTION
 MEM_1  0080f593
 A_MEM_1  00000000
instr  00000000
mem  0000000c
mem  0000000e
mem  00000008
mem  00000004
mem  0000000c
 ISSSSSS ADD INSTRUCTION
 NOT ISSSSSS ADDDD INSTRUCTION
    (is_lh_instr) |-> ##2 (no_hazard) &((alu_result == (op_a_alu + op_b_alu)) & ( op_a_alu == ID_rs1_data ) & (op_b_alu == ID_imm )) |-> ##1 ( ( MEM_WR == 1'b0 ) & (MEM_RD == 1'b1)) |=> ((WB_regwrite == 1'b1) & (data_write_reg == WB_data_write) & (WB_data_write == WB_dmem_data )) ; 
                                                                                                                                                                                                                                                     |
xmsim: *E,ASRTST (../tb/test_case.sv,371): (time 320 NS) Assertion testbench.top.check.lh_instr has failed (5 cycles, starting 280 NS)
check lh instr fail
    (is_lh_instr) |-> ##2 (no_hazard) &((alu_result == (op_a_alu + op_b_alu)) & ( op_a_alu == ID_rs1_data ) & (op_b_alu == ID_imm )) |-> ##1 ( ( MEM_WR == 1'b0 ) & (MEM_RD == 1'b1)) |=> ((WB_regwrite == 1'b1) & (data_write_reg == WB_data_write) & (WB_data_write == WB_dmem_data )) ; 
                                                                                                                                                                                                                                                     |
xmsim: *E,ASRTST (../tb/test_case.sv,371): (time 780 NS) Assertion testbench.top.check.lh_instr has failed (5 cycles, starting 740 NS)
check lh instr fail
    (is_lb_instr) |-> ##2 (no_hazard) &((alu_result == (op_a_alu + op_b_alu)) & ( op_a_alu == ID_rs1_data ) & (op_b_alu == ID_imm )) |-> ##1 ( ( MEM_WR == 1'b0 ) & (MEM_RD == 1'b1)) |=> ((WB_regwrite == 1'b1) & (data_write_reg == WB_data_write) & (WB_data_write == WB_dmem_data )) ; 
                                                                                                                                                                                                                                                     |
xmsim: *E,ASRTST (../tb/test_case.sv,379): (time 1170 NS) Assertion testbench.top.check.lb_instr has failed (5 cycles, starting 1130 NS)
check lb instr fail
    (is_lw_instr) |-> ##2 (no_hazard) &((alu_result == (op_a_alu + op_b_alu)) & ( op_a_alu == ID_rs1_data ) & (op_b_alu == ID_imm )) |-> ##1 ( ( MEM_WR == 1'b0 ) & (MEM_RD == 1'b1)) |=> ((WB_regwrite == 1'b1) & (data_write_reg == WB_data_write) & (WB_data_write == WB_dmem_data )) ; 
                                                                                                                                                                                                                                                     |
xmsim: *E,ASRTST (../tb/test_case.sv,363): (time 1270 NS) Assertion testbench.top.check.lw_instr has failed (5 cycles, starting 1230 NS)
check lw instr fail
    (is_lb_instr) |-> ##2 (no_hazard) &((alu_result == (op_a_alu + op_b_alu)) & ( op_a_alu == ID_rs1_data ) & (op_b_alu == ID_imm )) |-> ##1 ( ( MEM_WR == 1'b0 ) & (MEM_RD == 1'b1)) |=> ((WB_regwrite == 1'b1) & (data_write_reg == WB_data_write) & (WB_data_write == WB_dmem_data )) ; 
                                                                                                                                                                                                                                                     |
xmsim: *E,ASRTST (../tb/test_case.sv,379): (time 1430 NS) Assertion testbench.top.check.lb_instr has failed (5 cycles, starting 1390 NS)
check lb instr fail
this is  ADDI  instruction 00488793
this is ADDI instruction IMM =           4
this is  ADDI  instruction 006c8f93
this is ADDI instruction IMM =           6
this is  ADDI  instruction 00480413
this is ADDI instruction IMM =           4
    (is_lh_instr) |-> ##2 (no_hazard) &((alu_result == (op_a_alu + op_b_alu)) & ( op_a_alu == ID_rs1_data ) & (op_b_alu == ID_imm )) |-> ##1 ( ( MEM_WR == 1'b0 ) & (MEM_RD == 1'b1)) |=> ((WB_regwrite == 1'b1) & (data_write_reg == WB_data_write) & (WB_data_write == WB_dmem_data )) ; 
                                                                                                                                                                                                                                                     |
xmsim: *E,ASRTST (../tb/test_case.sv,371): (time 2540 NS) Assertion testbench.top.check.lh_instr has failed (5 cycles, starting 2500 NS)
check lh instr fail
this is  ADDI  instruction 00ae8c13
this is ADDI instruction IMM =          10
this is  ADDI  instruction 00c70593
this is ADDI instruction IMM =          12
    (is_lh_instr) |-> ##2 (no_hazard) &((alu_result == (op_a_alu + op_b_alu)) & ( op_a_alu == ID_rs1_data ) & (op_b_alu == ID_imm )) |-> ##1 ( ( MEM_WR == 1'b0 ) & (MEM_RD == 1'b1)) |=> ((WB_regwrite == 1'b1) & (data_write_reg == WB_data_write) & (WB_data_write == WB_dmem_data )) ; 
                                                                                                                                                                                                                                                     |
xmsim: *E,ASRTST (../tb/test_case.sv,371): (time 4880 NS) Assertion testbench.top.check.lh_instr has failed (5 cycles, starting 4840 NS)
check lh instr fail
this is  ADDI  instruction 01498493
this is ADDI instruction IMM =          20
 NOT ISSSSSS ADDDD INSTRUCTION
Simulation complete via $finish(1) at time 10 US + 0
../tb/testbench.sv:381    #10000  $finish;
xcelium> 